#===-- runtime/Float128Math/CMakeLists.txt ---------------------------------===#
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
#===------------------------------------------------------------------------===#

# FortranFloat128 implements IEEE-754 128-bit float math functions.
# It is a thin wapper and it currently relies on third-party
# libraries available for the target.
# It is distributed as a static library only.
# Fortran programs/libraries that end up linking any of the provided
# will have a dependency on the third-party library that is being
# used for building this flang_rt.quadmath library.

include(CheckLibraryExists)

set(sources
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/acos.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/acosh.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/asin.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/asinh.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/atan.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/atan2.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/atanh.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/ceil.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/complex-math.c
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/cos.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/cosh.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/erf.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/erfc.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/exp.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/exponent.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/floor.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/fma.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/fraction.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/hypot.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/j0.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/j1.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/jn.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/lgamma.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/llround.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/log.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/log10.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/lround.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/mod-real.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/modulo-real.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/nearest.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/nearbyint.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/norm2.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/pow.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/random.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/remainder.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/round.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/rrspacing.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/scale.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/set-exponent.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/sin.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/sinh.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/spacing.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/sqrt.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/tan.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/tanh.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/tgamma.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/trunc.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/y0.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/y1.cpp
  ${FLANG_RT_SOURCE_DIR}/lib/FortranFloat128Math/yn.cpp
  )

include_directories(AFTER "${CMAKE_CURRENT_SOURCE_DIR}/..")
add_library(FortranFloat128MathILib INTERFACE)
target_include_directories(FortranFloat128MathILib INTERFACE
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>
  )

if (FLANG_RUNTIME_F128_MATH_LIB)
  if (${FLANG_RUNTIME_F128_MATH_LIB} STREQUAL "libquadmath")
    check_include_file(quadmath.h FOUND_QUADMATH_HEADER)
    if(FOUND_QUADMATH_HEADER)
      add_compile_definitions(HAS_QUADMATHLIB)
    else()
      message(FATAL_ERROR
        "FLANG_RUNTIME_F128_MATH_LIB setting requires quadmath.h "
        "to be available: ${FLANG_RUNTIME_F128_MATH_LIB}"
        )
    endif()
  else()
    message(FATAL_ERROR
      "Unsupported third-party library for Fortran F128 math runtime: "
      "${FLANG_RUNTIME_F128_MATH_LIB}"
      )
  endif()

  add_flang_library(flang_rt.quadmath STATIC INSTALL_WITH_TOOLCHAIN
    ${sources})

  if (DEFINED MSVC)
    set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreaded)
    add_flang_library(flang_rt.quadmath.static STATIC INSTALL_WITH_TOOLCHAIN
      ${sources}
      )
    set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreadedDebug)
    add_flang_library(flang_rt.quadmath.static_dbg STATIC INSTALL_WITH_TOOLCHAIN
      ${sources}
      )
    add_dependencies(flang_rt.quadmath flang_rt.quadmath.static
      flang_rt.quadmath.static_dbg
      )
  endif()
elseif (HAVE_LDBL_MANT_DIG_113)
  # We can use 'long double' versions from libc.
  check_library_exists(m sinl "" FOUND_LIBM)
  if (FOUND_LIBM)
    target_compile_definitions(FortranFloat128MathILib INTERFACE
      HAS_LIBM
      )
    target_sources(FortranFloat128MathILib INTERFACE ${sources})
  else()
    message(FATAL_ERROR "flang_rt.quadmath cannot build without libm")
  endif()
else()
  # We can use '__float128' version from libc, if it has them.
  check_library_exists(m sinf128 "" FOUND_LIBMF128)
  if (FOUND_LIBMF128)
    target_compile_definitions(FortranFloat128MathILib INTERFACE
      HAS_LIBMF128
      )
    # Enable this, when math-entries.h and complex-math.h is ready.
    # target_sources(FortranFloat128MathILib INTERFACE ${sources})
  endif()
endif()
